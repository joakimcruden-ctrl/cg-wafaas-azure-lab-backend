#cloud-config
package_update: true
packages:
  - nmap
  - sqlmap
  - gobuster
  - ffuf
  - curl
  - httpie
  - jq
  - git
  - docker.io

# Ensure SSH password auth is enabled
ssh_pwauth: true
write_files:
  - path: /etc/ssh/sshd_config.d/60-password-auth.conf
    permissions: '0644'
    content: |
      PasswordAuthentication yes
  - path: /etc/sudoers.d/99-lab-nopasswd
    permissions: '0440'
    content: |
      %sudo ALL=(ALL) NOPASSWD:ALL
  - path: /etc/ssh/sshd_config.d/99-password-override.conf
    permissions: '0644'
    content: |
      PasswordAuthentication yes
      KbdInteractiveAuthentication no
      UsePAM yes

# Create all attendee users with sudo and no password prompt
users:
  - default
${users_block}

chpasswd:
  list: |
${chpasswd_list}
  expire: false

runcmd:
  - [ systemctl, restart, ssh ]
  - [ systemctl, enable, --now, docker ]
  # Ensure attendee users exist with passwords and sudo before heavy installs
  - |
    bash -lc '
    set -e
    umask 022
    while IFS=':' read -r uname upass; do
      [ -z "$uname" ] && continue
      if ! id -u "$uname" >/dev/null 2>&1; then
        useradd -m -s /bin/bash "$uname"
      fi
      echo "$uname:$upass" | chpasswd || true
      usermod -aG sudo "$uname" || true
      chage -I -1 -m 0 -M 99999 -E -1 "$uname" || true
      install -m 0755 /usr/local/bin/seed-api-discovery.sh "/home/$uname/seed-api-discovery.sh" || true
      chown "$uname:$uname" "/home/$uname/seed-api-discovery.sh" || true
    done <<'EOF_UP_EARLY'
${user_pass_pairs}
EOF_UP_EARLY
    systemctl reload ssh || true
    '
  - |
    bash -lc '
    set -u
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y --no-install-recommends software-properties-common apt-transport-https ca-certificates gnupg lsb-release || true
    pkgs="tmux zsh fzf ripgrep fd-find bat jq yq htop btop lsof strace ltrace git python3 python3-pip python3-venv pipx golang-go rustc cargo build-essential cmake nasm mingw-w64 upx-ucl docker.io docker-compose docker-compose-plugin podman neovim curl wget aria2 socat netcat-openbsd openssl nmap theharvester spiderfoot recon-ng rustscan masscan zmap dnsrecon dnsenum nbtscan smbclient enum4linux ldap-utils burpsuite zaproxy mitmproxy ffuf feroxbuster gobuster wfuzz sqlmap nikto wpscan joomscan hashcat john hydra medusa seclists wordlists cewl crunch hashid hashcat-utils python3-impacket responder samba samba-common-bin aircrack-ng hcxdumptool hcxpcapngtool reaver kismet bluez bettercap btlejack gnuradio gqrx-sdr rfcat wireshark tshark tcpdump android-tools-adb android-tools-fastboot apktool jadx ideviceinstaller libimobiledevice-utils ghidra radare2 cutter binwalk binutils file vim-common patchelf gdb lldb afl++ honggfuzz radamsa sleuthkit autopsy bulk-extractor foremost scalpel plaso yara age gnupg hashdeep bsdextrautils rclone openssh-client rsync pandoc"
    for p in $pkgs; do
      if ! apt-cache show "$p" >/dev/null 2>&1; then
        echo "Package $p not found in apt cache; skipping"
        continue
      fi
      apt-get install -y --no-install-recommends "$p" || echo "Failed to install $p; continuing"
    done

    # Ensure yq is available (for seed script YAML->JSON conversion)
    if ! command -v yq >/dev/null 2>&1; then
      echo "yq not found via apt; attempting binary install..."
      arch=$(dpkg --print-architecture || echo amd64)
      url=""
      case "$arch" in
        amd64) url="https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" ;;
        arm64|aarch64) url="https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64" ;;
        armhf|armv7l) url="https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm" ;;
      esac
      if [ -n "$url" ]; then
        curl -fsSL "$url" -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq || true
      fi
    fi
    if ! command -v yq >/dev/null 2>&1 && command -v pipx >/dev/null 2>&1; then
      echo "Installing yq via pipx as fallback..."
      pipx install yq || true
    fi

    # Ensure jq is available (for JSON parsing in seed script)
    if ! command -v jq >/dev/null 2>&1; then
      echo "jq not found via apt; attempting binary install..."
      arch=$(dpkg --print-architecture || echo amd64)
      url=""
      case "$arch" in
        amd64) url="https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64" ;;
        arm64|aarch64) url="https://github.com/jqlang/jq/releases/latest/download/jq-linux-aarch64" ;;
      esac
      if [ -n "$url" ]; then
        curl -fsSL "$url" -o /usr/local/bin/jq && chmod +x /usr/local/bin/jq || true
      fi
    fi

    # Secondary install strategies
    # Symlinks for common Debian names
    ln -sf /usr/bin/fdfind /usr/local/bin/fd || true
    ln -sf /usr/bin/batcat /usr/local/bin/bat || true

    # Ensure pipx global installs are available for all users
    if command -v pipx >/dev/null 2>&1; then
      pipx ensurepath || true
      pipx install --global theHarvester || true
      pipx install --global spiderfoot || true
      pipx install --global recon-ng || true
      pipx install --global wfuzz || true
    fi

    # Go-based tools: install latest into /usr/local/bin
    if command -v go >/dev/null 2>&1; then
      export GOBIN=/usr/local/bin
      go install github.com/ffuf/ffuf/v2@latest || true
      go install github.com/OJ/gobuster/v3@latest || true
      go install github.com/bettercap/bettercap@latest || true
    fi

    # Rust-based tools: install and copy binaries into /usr/local/bin
    if command -v cargo >/dev/null 2>&1; then
      cargo install feroxbuster || true
      cargo install rustscan || true
      for bin in /root/.cargo/bin/*; do
        [ -f "$bin" ] && install -m 0755 "$bin" /usr/local/bin/ || true
      done
    fi

    # Place seeder script into each attendee user's home
    while read -r name; do
      [ -z "$name" ] && continue
      if id -u "$name" >/dev/null 2>&1; then
        install -m 0755 /usr/local/bin/seed-api-discovery.sh "/home/$name/seed-api-discovery.sh" || true
        chown "$name:$name" "/home/$name/seed-api-discovery.sh" || true
      fi
    done <<'EOF_USERS'
${usernames_lines}
EOF_USERS

    # Fallback: ensure users exist, set passwords, and add sudo
    while IFS=':' read -r uname upass; do
      [ -z "$uname" ] && continue
      id -u "$uname" >/dev/null 2>&1 || useradd -m -s /bin/bash "$uname"
      echo "$uname:$upass" | chpasswd || true
      usermod -aG sudo "$uname" || true
      chage -I -1 -m 0 -M 99999 -E -1 "$uname" || true
    done <<'EOF_UP'
${user_pass_pairs}
EOF_UP

    # Final ensure sshd picks up overrides after user setup
    systemctl restart ssh || true
    '
